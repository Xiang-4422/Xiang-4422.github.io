<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java基础</title>
    <link href="/2022/09/04/Java%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/09/04/Java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="1-Java语言特点"><a href="#1-Java语言特点" class="headerlink" title="1. Java语言特点"></a>1. Java语言特点</h3><ul><li>面向对象（封装、继承、多态）</li><li>平台无关性（Java虚拟机）</li><li>多线程（语言级支持）</li><li>网络编程（Java诞生就是为了简化网络编程设计）</li><li>编译与解释并存</li><li>简单易学、可靠性、安全性</li></ul><h3 id="2-JVM、JRE、JDK"><a href="#2-JVM、JRE、JDK" class="headerlink" title="2. JVM、JRE、JDK"></a>2. JVM、JRE、JDK</h3><ul><li><p>JVM</p><blockquote><p>JVM是运行Java字节码的虚拟机，JVM针对不同的系统的特定实现，目的是使用相同的字节码，在不同平台的JVM上运行都能产生相同结果。</p></blockquote><ul><li><p>什么是字节码？采用字节码的好处？</p><blockquote><p>在Java中，JVM可以理解的代码就是字节码（.class文件）、它不面向特定处理器，只面向虚拟机。Java通过字节码的方式，一定程度上解决了传统解释性语言执行效率低的问题，同时又保留了解释性语言可移植的特点。所以因为采用字节码，Java程序运行比较高效，而且由于字节码不针对特定机器，所以Java程序无需重新编译即可在不同操作系统上运行。</p></blockquote></li><li><p>Java程序从源代码到运行的流程</p><p><img src="/2022/09/04/Java%E5%9F%BA%E7%A1%80/image-20220904193326678.png" alt="image-20220904193326678"></p><blockquote><p>.class -&gt; 机器码，由JVM进行转换。有两种转换方式：</p><ul><li>一是解释执行，先加载字节码文件，经过解释器解释执行；</li><li>二是编译执行，对于热点代码，由编译器完成一次编译过后将字节码对应的机器码保存下来，下次直接使用。</li></ul></blockquote></li></ul></li><li><p>JRE</p><blockquote><p>JRE是Java与模型时环境，它时运行已编译Java程序所需的所有内容的集合，包括JVM、Java类库、java命令和一些其他的基础构件。但是，它不能用于创建新程序。</p></blockquote></li><li><p>JDK</p><blockquote><p>JRE + 编译器（javac）+ 工具（如javadoc和jdb）。它能创建和编译程序。</p></blockquote></li></ul><p>   总结：</p><ul><li>JVM：（执行java字节码文件）</li><li>JRE：JVM + java类库 + java命令 + 基础构件（运行java程序）</li><li>JDK：JRE + 编译器 + 工具（创建和编译程序）</li></ul><h3 id="3-Oracle-JDK-和-OpenJDK"><a href="#3-Oracle-JDK-和-OpenJDK" class="headerlink" title="3. Oracle JDK 和 OpenJDK"></a>3. Oracle JDK 和 OpenJDK</h3><ul><li>OpenJDK完全开源，作为一个参考模型。Oracle JDK是OpenJDK的一个实现，包含自己的商业内容，不完全开源。</li><li>Oracle更稳定，有更多的类和一些错误修复。性能更好。</li></ul><h3 id="4-Java和C-的区别"><a href="#4-Java和C-的区别" class="headerlink" title="4. Java和C++的区别"></a>4. Java和C++的区别</h3><ul><li><p>都是面向对象的语言，都支持封装、继承和多态</p></li><li><p><strong>指针</strong>，Java不提供指针用来直接访问内存，程序内存更安全</p></li><li><p><strong>继承</strong>，Java的类是单继承的，C++支持多继承。虽然Java的类不能多继承，但是接口可以多继承（实现）</p></li><li><p><strong>内存管理</strong>，Java通过JVM自动管理内存，不需要程序员手动释放无用内存</p></li><li><p><strong>字符串结束符</strong>，C语言中字符串和字符数组随后都有额外字符 ‘\0’ 来表示结束。Java语言中没有结束符这一概念。</p><blockquote><p>Java是面向对象的，字符串和数组均是对象，对象有属性length来记录长度，所以说再额外使用结束符来标识末尾。</p></blockquote></li></ul><h3 id="5-什么是Java程序的主类？应用程序和小程序的主类有何不同？"><a href="#5-什么是Java程序的主类？应用程序和小程序的主类有何不同？" class="headerlink" title="5. 什么是Java程序的主类？应用程序和小程序的主类有何不同？"></a>5. 什么是Java程序的主类？应用程序和小程序的主类有何不同？</h3><blockquote><p>一个程序可以有很多个类，但是只能由一个类是主类。再Java应用程序中，这个主类是指包含main方法的类。</p></blockquote><blockquote><p>在小程序中，这个主类是一个继承自系统类JApplet或Applet的子类。应用程序的主类不一定要求是pulic类，但小程序的主类要求必须是public类。主类是Java程序执行的入口点。</p></blockquote><h3 id="6-Java应用程序（Application）和小程序（Applet）之间的差别"><a href="#6-Java应用程序（Application）和小程序（Applet）之间的差别" class="headerlink" title="6. Java应用程序（Application）和小程序（Applet）之间的差别"></a>6. Java应用程序（Application）和小程序（Applet）之间的差别</h3><ul><li>（1）运行方式不同。Java Application是完整的程序，可以独立运行；Java Applet程序不能单独运行，<br>它必须嵌入到用HTML语言编写的Web页面中，通过与Java兼容的浏览器来控制执行。</li><li>（2）运行工具不同。Java Application程序被编译以后，用普通的Java解释器就可以使其边解释边执行，<br>而Java Applet必须通过网络浏览器或者Applet观察器才能执行。</li><li>（3）程序结构不同。每个Java Application程序必定含有一个并且只有一个main方法，程序执行时<br>首先寻找main方法，并以此为入口点开始运行。含有main方法的那个类，常被称为主类，也就是说<br>Java Application程序都含有一个主类。而Applet程序则没有含main方法的主类，这也正是Applet程序不能独立运行的原因。<br>尽管Applet没有含main方法的主类，但Applet一定有一个从 java.applet.Applet派生的类，它是由Java系统提供的。</li><li>（4）受到的限制不同Java Application程序可以设计成能进行各种操作的程序，包括读／写文件的操作<br>但是 Java Applet 对站点的磁盘文件既不能进行读操作，也不能进行写 操作。然而，由于Applet的引入<br>使Web页面具有动态多媒体效果和可交互性能，这使由名为超文本、实为纯文本的HTML语言编写成的Web页面真正具有了超文本功能</li></ul><h3 id="7-import-java-x2F-javax有啥区别"><a href="#7-import-java-x2F-javax有啥区别" class="headerlink" title="7. import java&#x2F;javax有啥区别"></a>7. import java&#x2F;javax有啥区别</h3><blockquote><p>刚开始的时候JavaAPI所需的包均以是以java开头的包，javax作为扩展API包使用。随着时间的推移，javax逐渐成为JavaAPI的一部分，但是将javax包移动到java包中太麻烦，且会破坏一堆现有代码，所以直接将javax纳入为JavaAPI的一部分</p></blockquote><h3 id="8-为什么说Java语言“编译与解释并存”？"><a href="#8-为什么说Java语言“编译与解释并存”？" class="headerlink" title="8. 为什么说Java语言“编译与解释并存”？"></a>8. 为什么说Java语言“编译与解释并存”？</h3><blockquote><p>高级程序语言按照程序的执行方式分为编译型和解释型。</p><ul><li>编译型语言指编译器针对特定操作系统将源代码一次性翻译成可被该平台执行的机器码</li><li>解释型语言是指解释器对源程序逐行解释成特定平台的机器码并立即执行。</li></ul></blockquote><blockquote><p>Java语言既有编译型语言特征，也有解释型语言特征。java源码先编译成字节码，字节码再由解释器解释执行（同时也有编译器对热点代码进行编译）</p></blockquote><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="1-字符型常量和字符串常量的区别？"><a href="#1-字符型常量和字符串常量的区别？" class="headerlink" title="1. 字符型常量和字符串常量的区别？"></a>1. 字符型常量和字符串常量的区别？</h3><ul><li>形式：字符常量是单引号引起的一个字符；字符串常量是双引号引起的若干字符</li><li>含义：字符常量相当于一个整型值（ASCII值），可以参加表达式运算；字符串常量代表一个地址值（该字符串再内存中的存放地址）</li><li>占用内存：字符常量只占2个字节；字符串常量占若干字节</li></ul><h3 id="2-关于注释？"><a href="#2-关于注释？" class="headerlink" title="2. 关于注释？"></a>2. 关于注释？</h3><blockquote><p>注释并非越详细越好，好的代码本身就是注释，尽量通过规范和美化代码来减少不必要的注释。</p></blockquote><ul><li><p>注释种类</p><ul><li><p>单行注释</p><blockquote><p>&#x2F;&#x2F;注释</p></blockquote></li><li><p>多行注释</p><blockquote><p> &#x2F;*</p><p>注释</p><p>注释</p><p>*&#x2F;</p></blockquote></li><li><p>文档注释</p><blockquote><p>&#x2F;**</p><p>*文档注释</p><p>*&#x2F;</p></blockquote></li></ul></li></ul><h3 id="3-标识符和关键字的区别？"><a href="#3-标识符和关键字的区别？" class="headerlink" title="3. 标识符和关键字的区别？"></a>3. 标识符和关键字的区别？</h3><blockquote><p>在编写程序的时候，需要大量地为程序、类、变量、方法等取名字，于是就有了标识符。简单来说标识符就是一个名字。</p></blockquote><blockquote><p>但是有一些标识符，Java语言已经赋予其特殊含义，只能又在特定地地方，这种特殊的标识符就是关键字。因此关键字是被赋予特殊含义的标识符。</p></blockquote><h3 id="4-常见关键字"><a href="#4-常见关键字" class="headerlink" title="4. 常见关键字"></a>4. 常见关键字</h3><ul><li><p>访问控制：private、protected、public</p></li><li><p>类、方法和变量的修饰符：abstract、static、interface、final、extends、implments、new、native、strictfp、synchronized、transient、volatile、class</p></li><li><p>程序控制：break、continue、return、do、while、if、else、for、instanceof、switch、case、default</p></li><li><p>错误处理：try、catch、throw、throws、finally</p></li><li><p>包相关：import、package</p></li><li><p>基本类型：boolean、byte、char、double、float、int、long、short、null、true、false</p></li><li><p>变量引用：super、this、void</p></li><li><p>保留字：goto、const</p></li></ul><h3 id="5-continue、break和return区别"><a href="#5-continue、break和return区别" class="headerlink" title="5. continue、break和return区别"></a>5. continue、break和return区别</h3><ul><li>提前终止循环<ul><li>continue：跳出当前这一次循环（此次循环中continue后的语句不执行，直接跳到循环的开头进行循环的条件判断，执行下一次循环）</li><li>break：跳出当前所在的整个循环体，执形循环后的语句</li></ul></li><li>结束方法的运行<ul><li>return：直接结束方法的执行，用于没有返回值的方法</li><li>return value：返回一个特定值，并结束方法的执行</li></ul></li></ul><h3 id="6-泛型、类型擦除、通配符？"><a href="#6-泛型、类型擦除、通配符？" class="headerlink" title="6. 泛型、类型擦除、通配符？"></a>6. 泛型、类型擦除、通配符？</h3><ul><li><p>泛型：泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是<strong>参数化类型</strong>，也就是说所操作的数据类型被指定为一个参数</p><blockquote><p>泛型的三种使用方法：</p><ul><li><p>泛型类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//泛型类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generic</span>&lt;T&gt;&#123;<br>    <span class="hljs-keyword">private</span> T key;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Generic</span><span class="hljs-params">(T key)</span>&#123;<br>        <span class="hljs-built_in">this</span>.key = key;<br>    &#125;<br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> key;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//实例化泛型类</span><br>Generic&lt;Integer&gt; genericInteger = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>&lt;&gt;(<span class="hljs-number">123456</span>);<br></code></pre></td></tr></table></figure></li><li><p>泛型接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//泛型接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Generator</span>&lt;T&gt;&#123;<br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">method</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-comment">//实现泛型接口，不指定类型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GeneratorImpl</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Generator</span>&lt;T&gt;&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//实现泛型接口，指定类型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GeneratorImpl</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Generator</span>&lt;String&gt;&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>泛型方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//泛型方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;E&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">printArray</span><span class="hljs-params">(E[] inputArray)</span>&#123;<br>    <span class="hljs-keyword">for</span>(E element : inputArray)&#123;<br>        System.out.printf(<span class="hljs-string">&quot;%s&quot;</span>, element);<br>    &#125;<br>    System.out.println();<br>&#125;<br><span class="hljs-comment">//创建不同类型的数组，使用同一泛型方法打印</span><br>Integer[] intArray = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>String[] stringArray = &#123;<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>&#125;;<br>printArray(intArray);<br>printArray(stringArray);<br></code></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>常用通配符：T、E、K、V、？<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote">&lt;span class&#x3D;”hint–top hint–rounded” aria-label&#x3D;”聊一聊-JAVA 泛型中的通配符 T，E，K，V，？ - 掘金 (juejin.cn)</a></sup></p></blockquote></li></ul><p>“&gt;[2]</p><blockquote><ul><li>？标识不确定的java类型</li><li>T（type）标识具体的一个java类型</li><li>K V（key value）分别标识java键值中的Key Value</li><li>E（element）标识数组中的元素类型</li></ul></blockquote><ul><li><p>类型擦除：Java的泛型是<strong>伪泛型</strong>，因为Java在编译期间，所有的泛型信息都会被擦除，这就是通常所说的类型擦除。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Java泛型类型擦除以及类型擦除带来的问题 - 蜗牛大师 - 博客园 (cnblogs.com)">[1]</span></a></sup> 所有的泛型在编译过后均为Object，所以说，在运行期间通过反射可以向Integer泛型的List中添加String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>list.add(<span class="hljs-number">12</span>);<br><span class="hljs-comment">//直接往Integer的list中添加string会在编译器报错</span><br>list.add(<span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-comment">//通过反射获取运行期，list的add方法</span><br>Class&lt;? extend List&gt; clazz = list.getClass();<br><span class="hljs-type">Method</span> <span class="hljs-variable">add</span> <span class="hljs-operator">=</span> clazz.getDeclaredMethod(<span class="hljs-string">&quot;add&quot;</span>, Object.class);<br><span class="hljs-comment">//通过反射获取的add方法可以往Integer的list中添加string</span><br>add.invoke(list, <span class="hljs-string">&quot;a&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h3 id="7-x3D-x3D-和equals-的区别"><a href="#7-x3D-x3D-和equals-的区别" class="headerlink" title="7. &#x3D;&#x3D;和equals()的区别"></a>7. &#x3D;&#x3D;和equals()的区别</h3><ul><li><p>&#x3D;&#x3D;：比较的是值，若是基本数据类型，即直接比较它们的值是否相等；若是比较对象，因为引用变量的值是对象的地址，即比较的是对象的地址是否相同。</p></li><li><p>equals：它的作用是比较两个对象是否相等，不能用于比较基本数据类型变量。equals方法存在于Object类中，而Object类是所有类的父类，所有说所有的类都有equals方法。</p><blockquote><p>类的equals方法可以重写，重写即是定义规则使用&#x3D;&#x3D;比较对象的属性，来判断两个对象是否相等。</p><p>若没有重写则使用Object的默认equals方法，比较两个对象的地址，即和&#x3D;&#x3D;一样。</p></blockquote></li></ul><h3 id="8-hashCode-与equals"><a href="#8-hashCode-与equals" class="headerlink" title="8. hashCode()与equals()"></a>8. hashCode()与equals()</h3><ol><li><p>hashCode()介绍：</p><blockquote><p>hashCode()的作用是获取哈希码，也称为散列码；它返回一个int整数，用于确定对象在哈希表中的索引位置。</p></blockquote></li><li><p>为什么要有hashCode？</p><blockquote><p> 减少equals的使用次数。若要将对象加入HashSet，首先会计算对象的hashcode，与其他已加入的对象的hashcode值比较，若没有重复的hashcode，则没有重复的对象。若有重复的hashcode，则使用equals方法来确定对象是否真的相同。若是hashcode相同的不同对象，则会将后加入的对象散列到其他位置</p></blockquote></li><li><p>为什么重写equals时必须重写hashCode方法？</p><blockquote><p>hashCode方法要实现equals方法认定相等的对象返回相同的hashcode值。若是默认的hashCode方法，使用的是对象地址转换的hashcode值，但是两个不同的对象地址不同，但是它们可以是相等的。若使用默认的Object类的hashCode方法则相等的对象有不同的hashcode值</p></blockquote></li><li><p>为什么hashcode值相等的对象不一定相等？</p><blockquote><p>hash碰撞</p></blockquote></li></ol><h3 id="9-获取键盘输入"><a href="#9-获取键盘输入" class="headerlink" title="9. 获取键盘输入"></a>9. 获取键盘输入</h3><ol><li><p>通过Scanner</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> input.nextLine();<br>input.close();<br></code></pre></td></tr></table></figure></li><li><p>通过BufferedReader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BufferReader</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> input.readLine();<br></code></pre></td></tr></table></figure></li></ol><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="1-Java中有几种基本数据类型-以及其对应的包装类是什么-各自占用多少字节"><a href="#1-Java中有几种基本数据类型-以及其对应的包装类是什么-各自占用多少字节" class="headerlink" title="1. Java中有几种基本数据类型?以及其对应的包装类是什么?各自占用多少字节?"></a>1. Java中有几种基本数据类型?以及其对应的包装类是什么?各自占用多少字节?</h3><table><thead><tr><th>基本类型</th><th>包装类</th><th>位数</th><th>字节</th><th>默认值</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td><td>8</td><td>1</td><td>0</td></tr><tr><td>short</td><td>Short</td><td>16</td><td>2</td><td>0</td></tr><tr><td>int</td><td>Integer</td><td>32</td><td>4</td><td>0</td></tr><tr><td>long</td><td>Long</td><td>64</td><td>8</td><td>0L</td></tr><tr><td>float</td><td>Float</td><td>32</td><td>4</td><td>0f</td></tr><tr><td>double</td><td>Double</td><td>64</td><td>8</td><td>0d</td></tr><tr><td>char</td><td>Character</td><td>16</td><td>2</td><td>‘u0000’</td></tr><tr><td>boolean</td><td>Boolean</td><td>1</td><td></td><td>false</td></tr></tbody></table><blockquote><p>long类型的数值一定要在数值后加上<strong>L</strong>，否则作为整型解析；</p><p>对于boolean，不同JVM不同实现，逻辑上是占一位，但实际中会考虑在计算机中的高效存储。</p></blockquote><h3 id="2-自动拆装箱"><a href="#2-自动拆装箱" class="headerlink" title="2.自动拆装箱"></a>2.自动拆装箱</h3><ul><li><p>是什么</p><blockquote><p>装箱：Integer i &#x3D; 10;</p><p>拆箱：int n &#x3D; i;</p></blockquote></li><li><p>原理</p><blockquote><p>在编译的时候自动调用包装类对应的方法来进行拆装箱</p><p>装箱：Integer.valueOf(int)</p><p>拆箱：Integer.intValue()</p></blockquote></li></ul><h3 id="3-包装类的常量池"><a href="#3-包装类的常量池" class="headerlink" title="3.包装类的常量池"></a>3.包装类的常量池</h3><p>常量池技术的意义：</p><blockquote><p>在缓存数据范围内的包装类，新建的多个相同数值的包装类会指向同一个地址</p><p>浮点数类型包装类并没有实现常量池技术</p></blockquote><ul><li><p>整型：Byte、Short、Integer、Long</p><blockquote><p>这四种包装类拆创建了数值[-128, 127]的相应类型的缓存数据</p></blockquote></li><li><p>Character</p><blockquote><p>创建了[0, 127]范围的缓存数据</p></blockquote></li><li><p>Boolean</p><blockquote><p>直接返回True Or False</p></blockquote></li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="1-为什么Java中只有值传递？"><a href="#1-为什么Java中只有值传递？" class="headerlink" title="1.为什么Java中只有值传递？"></a>1.为什么Java中只有值传递？</h3><p>程序设计语言中的一些术语：</p><blockquote><ul><li><p>按值调用（call by value）：表示方法接收的是调用者提供的值</p></li><li><p>按引用调用（call by reference）：表示方法接收的是调用者提供的变量地址</p></li></ul></blockquote><p>一个方法可以修改传递引用所对应的变量值，而不能修改传递值调用所对应的变量值。</p><p>Java中方法参数的使用情况：</p><blockquote><ul><li>一个方法不能修改一个基本数据类型的参数（数值型或布尔型）</li><li>一个方法可以改变一个对象参数的状态</li><li>一个方法不能让对象参数引用另一个新的对象</li></ul></blockquote><h3 id="2-重载和重写的区别"><a href="#2-重载和重写的区别" class="headerlink" title="2.重载和重写的区别"></a>2.重载和重写的区别</h3><blockquote><p>重载：同一个方法名，根据不同的输入数据，做出不同的处理</p><p>重写：子类继承父类的方法，若子类要对于相同的数据，做出与父类不同的响应的时候，要重写父类方法</p></blockquote><h4 id="重载："><a href="#重载：" class="headerlink" title="重载："></a>重载：</h4><ul><li><strong>方法的签名</strong>包括方法名和参数类型</li><li>重载发生在同一个类中，方法名相同，参数不同（类型、个数、顺序），重载的方法可以有不同的返回值和访问修饰符</li><li>方法签名不包括方法的返回类型，所以说不能存在方法签名相同，但是返回类型不同的方法。</li></ul><h4 id="重写："><a href="#重写：" class="headerlink" title="重写："></a>重写：</h4><ul><li>重写发生在运行期</li><li>返回值类型、方法名、参数列表必须相同，抛出的异常范围不超过父类，访问修饰符范围不低于父类。</li><li>若父类方法范文修饰符为 private&#x2F;final&#x2F;static 则子类不能重写该方法，但是被static修饰的方法能够被再次声明</li><li>构造方法无法被重写</li></ul><table><thead><tr><th>区别点</th><th>重载</th><th>重写</th></tr></thead><tbody><tr><td>发生范围</td><td>同一个类中</td><td>子类中</td></tr><tr><td>参数</td><td>必须修改</td><td>一定不能改</td></tr><tr><td>返回类型</td><td>可修改</td><td>一定不能改</td></tr><tr><td>异常</td><td>可修改</td><td>可以减少或删除，一定不能抛出更广的异常</td></tr><tr><td>访问修饰符</td><td>可修改</td><td>可以扩大范围吧范围，一定不能缩小</td></tr><tr><td>发生阶段</td><td>编译期</td><td>运行期</td></tr></tbody></table><h3 id="3-深拷贝VS浅拷贝"><a href="#3-深拷贝VS浅拷贝" class="headerlink" title="3.深拷贝VS浅拷贝"></a>3.深拷贝VS浅拷贝</h3><p>对于基本数据类型都一样进行值传递</p><p>对与引用数据类型：</p><ul><li>浅拷贝：拷贝原对象的引用</li><li>深拷贝：创建一个新的对象，并对原引用对象的数据进行复制，将新对象的引用拷贝</li></ul><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><h3 id="1-面向对象和面向过程的区别-lt-span-class-x3D-”hint–top-hint–rounded”-aria-label-x3D-”怎么理解面向对象和面向过程到底的本质区别？-阿里云开发者社区-aliyun-com"><a href="#1-面向对象和面向过程的区别-lt-span-class-x3D-”hint–top-hint–rounded”-aria-label-x3D-”怎么理解面向对象和面向过程到底的本质区别？-阿里云开发者社区-aliyun-com" class="headerlink" title="1. 面向对象和面向过程的区别&lt;span class&#x3D;”hint–top hint–rounded” aria-label&#x3D;”怎么理解面向对象和面向过程到底的本质区别？ .-阿里云开发者社区 (aliyun.com)"></a>1. 面向对象和面向过程的区别<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote">&lt;span class&#x3D;”hint–top hint–rounded” aria-label&#x3D;”怎么理解面向对象和面向过程到底的本质区别？ .-阿里云开发者社区 (aliyun.com)</a></sup></h3><p>“&gt;[3]</p><blockquote><p>面向过程就是分析出解决问题所需的步骤，然后使用函数把这些步骤一步一步实现，使用的时候依次调用。</p><p>面向对象就是把问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描述某个事物在整个解决问题的步骤中的行为。</p></blockquote><h3 id="2-构造器能够被重写"><a href="#2-构造器能够被重写" class="headerlink" title="2. 构造器能够被重写"></a>2. 构造器能够被重写</h3><blockquote><p>构造器不能被重写，但是可以被重载，所以说一个类中可以有多个构造器</p></blockquote><h3 id="3-关于构造方法"><a href="#3-关于构造方法" class="headerlink" title="3. 关于构造方法"></a>3. 关于构造方法</h3><h4 id="3-1-构造方法的作用？若类没有声明构造方法会怎样？"><a href="#3-1-构造方法的作用？若类没有声明构造方法会怎样？" class="headerlink" title="3.1 构造方法的作用？若类没有声明构造方法会怎样？"></a>3.1 构造方法的作用？若类没有声明构造方法会怎样？</h4><blockquote><p>构造方法的主要作用是完成类对象的初始化工作</p></blockquote><blockquote><p>若一个类没有声明构造方法，也就生成一个默认得无参构造方法，我们在创建对象得时候加一个空括号就是在调用这个无参构造方法。若我们添加了类的构造方法，那么就不会生成默认得无参构造方法。</p></blockquote><h4 id="3-2在调用子类构造方法之前会先调用父类的构造方法，其目的是？"><a href="#3-2在调用子类构造方法之前会先调用父类的构造方法，其目的是？" class="headerlink" title="3.2在调用子类构造方法之前会先调用父类的构造方法，其目的是？"></a>3.2在调用子类构造方法之前会先调用父类的构造方法，其目的是？</h4><blockquote><p>帮助子类完成初始化工作</p></blockquote><h4 id="3-3-在Java中定义一个无参构造方法的意义"><a href="#3-3-在Java中定义一个无参构造方法的意义" class="headerlink" title="3.3 在Java中定义一个无参构造方法的意义"></a>3.3 在Java中定义一个无参构造方法的意义</h4><blockquote><p>Java程序在执行子类的构造方法之前，若没有使用super显式地调用父类地构造方法，就会调用父类中地无参构造方法。若父类中没有无参构造方法，而且子类没有用super调用父类中特定的构造方法，则编译的时候就会出错。</p></blockquote><h4 id="3-4-构造方法的特性"><a href="#3-4-构造方法的特性" class="headerlink" title="3.4 构造方法的特性"></a>3.4 构造方法的特性</h4><ul><li>名字与类名相同</li><li>没有返回值，但是不能用void声明构造函数</li><li>构造方法子啊生成类时自动执行，无需调用</li></ul><h3 id="4-成员变量和局部变量的区别"><a href="#4-成员变量和局部变量的区别" class="headerlink" title="4. 成员变量和局部变量的区别"></a>4. 成员变量和局部变量的区别</h3><ul><li>语法形式：<ul><li>成员变量属于类，局部变量属于方法；</li><li>成员变量可以被public、private、static等修饰符修饰，局部变量不能。但是二者都可以被final修饰</li></ul></li><li>存储形式：<ul><li>若成员变量被static修饰，那么这个成员变量属于类，若没有，那么这个成员变量属于实例。</li><li>对象存储在堆内存，局部变量存储在栈内存</li></ul></li><li>生存时间：<ul><li>成员变量属于对象，随着对象的创建而存在</li><li>局部变量随着方法的调用而消失</li></ul></li><li>默认值：<ul><li>成员变量若没有被初值，则会以类型的默认值赋值（被final修饰的成员变量必须显式的赋值）</li><li>局部变量不会自动赋值</li></ul></li></ul><h3 id="5-对象实体与对象引用有何不同？"><a href="#5-对象实体与对象引用有何不同？" class="headerlink" title="5. 对象实体与对象引用有何不同？"></a>5. 对象实体与对象引用有何不同？</h3><ul><li>使用new运算符创建对象实例（对象实例在堆内存中），对象引用指向对象实例（对象引用在栈内存中）</li><li>一个对象引用可以指向0或1个对象；一个对象可以有n个引用指向它</li></ul><h3 id="6-对象相等与指向它们的引用相等的区别"><a href="#6-对象相等与指向它们的引用相等的区别" class="headerlink" title="6. 对象相等与指向它们的引用相等的区别"></a>6. 对象相等与指向它们的引用相等的区别</h3><p>对象相等比较的是对象的内容是否相等。而引用相等比较的是它们指向的内存地址时候相等。</p><h2 id="面向对象的三大特征"><a href="#面向对象的三大特征" class="headerlink" title="面向对象的三大特征"></a>面向对象的三大特征</h2><h3 id="1-封装"><a href="#1-封装" class="headerlink" title="1.封装"></a>1.封装</h3><p>封装就是把一个对象的状态信息（属性）隐藏在对象内部，不允许外部对象直接访问对象的内部信息。可以提供一些可以被外界访问的方法来操作属性。</p><h3 id="2-继承"><a href="#2-继承" class="headerlink" title="2. 继承"></a>2. 继承</h3><p>不同类型的对象，相互之间经常有一定数量的共同点，与此同时每个对象还拥有自己的额外特性。例如小红同学和小明同学，它们都是学生拥有学生的特征（学号，班级等），但是每个同学由有各自不同的优点，比如小红数学好，小明力气大。</p><p>继承是使用已经存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以使用父类的功能，但是不能选择性地继承父类。</p><p>通过使用继承，可以快速地创建新地类，可以提高代码地重用，程序的可维护性，节省大量创建新类的时间，提高开发效率。</p><p>关于继承：</p><ul><li><strong>继承</strong>，子类拥有父类对象的所有属性和方法（包括私有的属性和方法），但是父类中的私有属性和方法子类是无法访问的，只是拥有。</li><li><strong>拓展</strong>，子类可以拥有自己的属性和方法，即子类可以对父类进行拓展。</li><li><strong>重写</strong>，子类可以用自己的方式实现父类的方法。</li></ul><h3 id="3-多态"><a href="#3-多态" class="headerlink" title="3. 多态"></a>3. 多态</h3><p>多态表示一个对象具有多种状态。具体表现为父类的引用指向子类的实例。</p><p>多态的特点：</p><ul><li>对象类型和引用类型之间具有 <strong>继承&#x2F;实现</strong> 的关系；</li><li>对象类型不可变，引用类型可变；</li><li>方法具有多态性，属性不具有多态性；</li><li>引用类型不能调用 ”只在子类存在但是在父类不存在的“ 方法；</li><li>如果子类重写了父类的方法，真正执行的是子类覆写的方法。</li></ul><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><h4 id="1-为什么在静态方法内调用一个非静态成员是非法的？"><a href="#1-为什么在静态方法内调用一个非静态成员是非法的？" class="headerlink" title="1. 为什么在静态方法内调用一个非静态成员是非法的？"></a>1. 为什么在静态方法内调用一个非静态成员是非法的？</h4><p>因为静态方法可以不通过类调用，不通过对象调用，而非静态成员存在与对象中，所以说在静态方法中，不能访问&#x2F;调用其他非静态成员。</p><h4 id="2-静态方法和实例方法的区别"><a href="#2-静态方法和实例方法的区别" class="headerlink" title="2. 静态方法和实例方法的区别"></a>2. 静态方法和实例方法的区别</h4><ul><li>调用，在外部调用静态方法时，可以使用 ”类名.方法名“ 和 ”对象名.方法名” 的方式访问。也就是说，静态方法的调用无需创建对象。</li><li>类成员访问范围，静态方法只能访问本类的静态成员，即（静态成员变量和静态方法）。</li></ul><h4 id="3-常见修饰符总结"><a href="#3-常见修饰符总结" class="headerlink" title="3.常见修饰符总结"></a>3.常见修饰符总结</h4><p><strong>3.1 修饰类：</strong></p><ul><li><p>访问权限修饰符</p><ul><li><p>public：完全开放</p></li><li><p>protected：同包及子类访问</p></li><li><p>default：同包访问</p></li><li><p>private：只能本类访问</p></li></ul></li><li><p>限定符</p><ul><li>abstract：指定为抽象类</li><li>final：指定为最终类，不可被继承</li></ul></li></ul><p><strong>3.2 修饰成员变量：</strong></p><ul><li><p>限定符</p><ul><li><p>static：类属性，可直接通过类名调用</p><blockquote><p>static 不能修饰普通类，但是可以用来<strong>修饰内部类</strong>，因为内部类时类的成员变量。若用static修饰内部类，可以直接使用new OuterClass.InnerClass()直接创建出来。</p></blockquote></li><li><p>final：该成员不能不重写，即定义常量</p><blockquote><p>final修饰的<strong>属性变量</strong>必须在定义或者构造函数中初始化</p><p>final修饰的<strong>局部变量</strong>在使用前赋值即可</p><p>通常与static一起使用以创建<strong>类常量</strong>，此时该变量必须在定义的时候进行初始化</p></blockquote></li><li><p><del>transient</del>：不许列化</p></li><li><p><del>volatile</del>：同步变量</p></li></ul></li></ul><p><strong>3.3修饰成员方法：</strong></p><ul><li><p>限定符</p><ul><li><p>static：类方法，可通过类名直接调用</p></li><li><p>final：方法不能被重写</p></li><li><p>abstract：抽象方法，没有方法体</p><blockquote><p>抽象方法不能被声明为final和static</p></blockquote></li><li><p><del>synchronized</del>：同步方法</p></li><li><p><del>native</del>：本地方法（集成其他语言的代码）</p></li></ul></li></ul><h3 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h3><p>从设计层面来说，抽象是对类的抽象，是一种模板设计，而接口是对行为的抽象，是一种行为规范。</p><ul><li>接口的方法默认是public，抽象类可以有非抽象方法，抽象方法可以有的访问修饰符不能是privat，因为抽象方法就是为了被重写的，而private修饰的方法是无法被子类访问的，更不用说重写了。</li><li>接口中只能有static、final变量，不能有其他变量，抽象类中不一定。</li><li>一个类可以实现多个接口，但是只能继承一个类。接口本身可以实现多个接口。</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="1-String、StringBuffer、StringBuilder区别？String为什么不可变？"><a href="#1-String、StringBuffer、StringBuilder区别？String为什么不可变？" class="headerlink" title="1. String、StringBuffer、StringBuilder区别？String为什么不可变？"></a>1. String、StringBuffer、StringBuilder区别？String为什么不可变？</h3><p>存储：</p><ul><li>String：使用final修饰的字符数组来保存字符串，因此String不可变。</li><li>StringBuilder和StringBuffer都继承自AbstractStringBuilder，使用字符串数组保存字符串，但是没有使用final修饰，所有保存的字符串可变</li></ul><p>线程安全：</p><ul><li><p>String不可变，可以理解为常量，所以说线程安全</p></li><li><p>StringBuffer对方法加了同步锁或者对调用的方法加了同步锁，所以说线程安全</p></li><li><p>StringBuilder没有对方法加锁，是非线程安全的</p><blockquote><p>String类型改变时会生成新的String对象，然后将指针指向新的String对象。</p><p>StringBuilder直接对对象本身修改。用多线程不安全的风险换10%左右的性能提升。</p></blockquote></li></ul><h3 id="2-Object类的常见方法"><a href="#2-Object类的常见方法" class="headerlink" title="2. Object类的常见方法"></a>2. Object类的常见方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//用于返回当前运行时对象的Class对象，使用final关键词修饰，故不允许子类重写</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> Class&lt;?&gt; getClass();<br><br><span class="hljs-comment">//返回对象的哈希码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span>;<br><br><span class="hljs-comment">//默认比较两个对象地址是否相等，可重写自定义对象相等比较</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span>;<br><br><span class="hljs-comment">//用于创建并返回当前对象的一份拷贝。使用必须重写，Object类没有实现Cloneable接口，直接使用会抛错。</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">native</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException;<br><br><span class="hljs-comment">//默认返回类名@实例的哈希码的16进制的字符串</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>;<br><br><span class="hljs-comment">//---------------------------线程相关-------------------------------------</span><br><br><span class="hljs-comment">//唤醒一个在此对象监视器上等待的线程</span><br>notify();<br><br><span class="hljs-comment">//唤醒所有在此对象监视器上等待的线程</span><br>notifyAll();<br><br><span class="hljs-comment">//暂停线程的执行。sleep方法没有释放锁，wait方法在暂停期间释放锁。</span><br>wait();<br><br><span class="hljs-comment">//实例被垃圾回收期回收的时候触发的操作</span><br>finalize();<br></code></pre></td></tr></table></figure><h1 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h1><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p><img src="/2022/09/04/Java%E5%9F%BA%E7%A1%80/gailan-01.png" alt="img"></p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p><img src="/2022/09/04/Java%E5%9F%BA%E7%A1%80/npe-1.jpg" alt="img"></p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="1-程序、线程、进程的基本概念和它们之间的关系"><a href="#1-程序、线程、进程的基本概念和它们之间的关系" class="headerlink" title="1. 程序、线程、进程的基本概念和它们之间的关系"></a>1. 程序、线程、进程的基本概念和它们之间的关系</h3><ul><li><p>程序：</p><blockquote><p>程序是含有指令和数据的文件，被存储在磁盘或其他的数据存储设备中,也就是说程序是静态的代码。</p></blockquote></li><li><p>进程：（资源分配的最小单位）</p><blockquote><p>进程是程序的一次执行过程，是系统运行程序的基本单位，因此<strong>进程是动态的</strong>。</p><p>系统运行一个程序即是一个进程从创建、运行到消亡的过程。简单来看，一个进程就是一个执行中的程序，它在计算机中一个指令接着一个指令地执行，同时每个进程还占有某些系统资源，比如说CPU时间，内存空间，文件，输入输出设备的使用权等。</p></blockquote></li><li><p>线程：（系统调度的最小单位）</p><blockquote><p>线程与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享一块内存空间和一组系统资源，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小很多，也正因为如此，线程也被称为轻量级进程。</p></blockquote></li></ul><p>关系：</p><p>当程序被执行时，将会被操作系统载入内存中。线程时进程划分成的更小的运行单位。线程和进程的最大不同在于基本各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。从另一个角度来说进程属于操作系统的范畴，主要是同段时间内，可以同时执行一个以上的程序，而线程则是在一个同一程序内几乎同时执行一个以上的程序段</p><h3 id="2-线程的基本状态"><a href="#2-线程的基本状态" class="headerlink" title="2. 线程的基本状态"></a>2. 线程的基本状态</h3><blockquote><ul><li><p>NEW：初始状态</p><blockquote><p>线程被构建，但是还没调用start()方法</p></blockquote></li><li><p>RUNNABLE：运行状态</p><blockquote><p>Java线程将操作系统中的就绪和运行两种状态笼统地称为“运行中”</p></blockquote></li><li><p>BLOCKED：阻塞状态</p><blockquote><p>表示线程阻塞与锁</p></blockquote></li><li><p>WAITING：等待状态</p><blockquote><p>表示线程进入等待状态，进入该状态表示档期那线程需要等待其他线程做出一些特定动作（通知或中断）</p></blockquote></li><li><p>TIME_WAITING：超时等待状态</p><blockquote><p>该状态不同于WAITING，它是可以在指定地时间自行返回地</p></blockquote></li><li><p>TERMINATED：终止状态</p><blockquote><p>表示当前线程已经执行完毕</p></blockquote></li></ul></blockquote><h2 id="I-x2F-O"><a href="#I-x2F-O" class="headerlink" title="I&#x2F;O"></a>I&#x2F;O</h2><h3 id="1-Java中的IO流分为几种"><a href="#1-Java中的IO流分为几种" class="headerlink" title="1. Java中的IO流分为几种"></a>1. Java中的IO流分为几种</h3><p>划分方式：</p><blockquote><p><strong>流的流向分</strong>：输入流和输出流</p><p><strong>操作单元</strong>：字节流和字符流</p><p><strong>流的角色</strong>：节点流和处理流</p></blockquote><p>IO流的派生抽象基类</p><blockquote><p>InputStream&#x2F;Reader：输入流 + 字节流&#x2F;字符流</p><p>OutputStream&#x2F;Writer：输出流 + 字节流&#x2F;字符流</p></blockquote><h3 id="2-有了字节流为什么还要有字符流"><a href="#2-有了字节流为什么还要有字符流" class="headerlink" title="2. 有了字节流为什么还要有字符流"></a>2. 有了字节流为什么还要有字符流</h3><p>问题本质：</p><blockquote><p>不管是文件读写还是网络发送接收，信息的最小存储单位都是字节，那为什么I&#x2F;O流操作要分为字节流操作和字符流操作？</p></blockquote><p>回答：</p><blockquote><p>字符流是由Java虚拟机将字节转换得到的，问题就出在这个过程非常耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。所以，I&#x2F;O流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果有音频、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。</p></blockquote><h3 id="3-BIO，BIO，AIO有什么区别"><a href="#3-BIO，BIO，AIO有什么区别" class="headerlink" title="3. BIO，BIO，AIO有什么区别"></a>3. BIO，BIO，AIO有什么区别</h3><ul><li><p>BIO（Blocking I&#x2F;O）：同步阻塞IO</p><blockquote><p>数据的读取写入必须阻塞在一个线程内等待其完成。在活动连接数不是特别高（小于单机1000）的情况下，这种模型是比较不错的，可以让每个连接专注于自己的I&#x2F;O并且编程模型简单，也不用过多考虑系统的过载、限流等问题。线程池本身就是一个天然的漏斗，可以缓冲一些系统处理不了的来连接或请求。但是，当面对十万甚至是百万级连接的时候，传统的BIO模型无能为力。因此需要一种更高效的I&#x2F;O处理模型来应对更高的并发量。</p></blockquote></li><li><p>NIO（Non-blocking&#x2F;New I&#x2F;O）：同步非阻塞IO</p><blockquote><p>在Java1.4引入NIO框架，对应java.nio包，提供了Channel，Selector，Buffer等抽象。NIO中的N可以理解为Non-blocking，不单纯是New。它支持<strong>面向缓冲</strong>的，<strong>基于通道</strong>的I&#x2F;O操作方法。NIO提供了与传统BIO模型中的Socket和ServerSocket相对应的SocketChannel和ServerSocketChannel两种不同的套接字通道实现，两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。对于低负载、低并发的应用程序，可以使用同步阻塞I&#x2F;O来提升开发速率和更好的维护性；对于高负载、高并发的（网络）应用，应使用NIO的非阻塞模式来开发。</p></blockquote></li><li><p>AIO（Asynchronous I&#x2F;O）：异步非阻塞IO</p><blockquote><p>在Java7中引入了NIO的改进版NIO2，它是异步非阻塞的IO模型。异步IO是<strong>基于事件和回调机制实现</strong>的也就是应用操作之后会直接返回，不会阻塞在那里，当后台处理完成、操作系统会通知相应的线程进行后续的操作。AIO是异步IO的许哦谢，虽然NIO在网络操作中，提供了非阻塞的方法，但是NIO的IO行为还是同步的。对于NIO来说，我们的业务线程是在IO操作准备好时，得到通知，接着就由这个线程自行进行IO操作，IO操作本身是同步的。</p><p><strong>AIO应用还不广泛。</strong></p></blockquote></li></ul><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.cnblogs.com/wuqinglong/p/9456193.html">Java泛型类型擦除以及类型擦除带来的问题 - 蜗牛大师 - 博客园 (cnblogs.com)</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://juejin.cn/post/6844903917835419661">聊一聊-JAVA 泛型中的通配符 T，E，K，V，？ - 掘金 (juejin.cn)</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://developer.aliyun.com/article/799160#:~:text=%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E9%9D%A2%E5%90%91%E8%BF%87,%E6%93%8D%E4%BD%9C%E5%AD%98%E5%82%A8%E5%9C%A8%E4%B8%80%E8%B5%B7%E3%80%82">怎么理解面向对象和面向过程到底的本质区别？ .-阿里云开发者社区 (aliyun.com)</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL进阶</title>
    <link href="/2022/09/03/MySQL%E8%BF%9B%E9%98%B6/"/>
    <url>/2022/09/03/MySQL%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h1><p>在安装MySQL时已经指定了默认编码为UTF8，所以在创建数据库、创建表的时候都无需指定编码。</p><ul><li><p>几个关于编码的参数：</p><ul><li><p>character_set_client</p><blockquote><p>服务器用来解读用户发来数据所使用的编码</p></blockquote></li><li><p>character_set_results</p><blockquote><p>服务器发送给客户数据的编码</p></blockquote></li><li><p>character_set_connection</p></li><li><p>character_set_database</p></li><li><p>character_set_server</p></li><li><p>character_set_system</p></li></ul></li><li><p>查看数据库当前编码设置：<code>SHOW VARIABLES LIKE &#39;char%&#39;</code>;<img src="/2022/09/03/MySQL%E8%BF%9B%E9%98%B6/image-20220903103244158.png" alt="image-20220903103244158"></p></li><li><p>编码的修改：</p><ol><li><p>命令行临时修改</p><blockquote><p><code>set character_set_client=gbk;</code></p></blockquote></li><li><p>配置文件永久修改</p><blockquote><p>可以在my.ini配置文件中修改</p><p>default-character-set&#x3D;gbk</p><p>该项目会同时修改三个变量的编码：client、results、connection</p></blockquote></li></ol><p>注意：修改后要重启MySQL服务</p><ul><li><code>net stop mysql</code></li><li><code>net start mysql</code></li></ul></li></ul><h1 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h1><blockquote><p>备份：数据库 –&gt; SQL脚本</p><p>恢复：SQL脚本 –&gt; 数据库</p></blockquote><ol><li><p>数据库导出SQL脚本（备份数据库内容）</p><ul><li>命令：<code>mysqldump -u用户名 -p密码 数据库名&gt;生成的脚本文件路径</code></li><li>注意:<ul><li>不要打分号，不要登录mysql，直接在cmd下运行</li><li>生成的脚本文件中不包含create database语句</li></ul></li></ul></li><li><p>从SQL脚本恢复至数据库</p><blockquote><p>方法一、不用登录数据库</p><p>命令：<code>mysql -u用户名 -p密码 数据库名&lt;用于恢复的脚本文件路径</code></p></blockquote><blockquote><p>方法二、登录数据库，并在选择对应数据库</p><p>命令：<code>source 用于恢复的脚本文件路径</code></p></blockquote></li></ol><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><p>  约束是添加到列上的，用来约束列</p><h2 id="一、主键约束：PRIMARY-KEY"><a href="#一、主键约束：PRIMARY-KEY" class="headerlink" title="一、主键约束：PRIMARY KEY"></a>一、主键约束：PRIMARY KEY</h2><ul><li>主键特点：<strong>非空、唯一、被引用</strong></li></ul><blockquote><p>当表的某一列被指定为主键后，该列就不能为空，不能有重复着值出现。</p></blockquote><ul><li><p>主键的创建与删除</p><ul><li><p>创建表时指定主键：(指定sid为主键列，即为sid列添加主键约束)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">CREATE TABLE stu(<br>sidCHAR(6) PRIMARY KEY,<br>snameVARCHAR(20),<br>ageINT,<br>genderVARCHAR(10),<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE stu(<br>sidCHAR(6),<br>snameVARCHAR(20),<br>ageINT,<br>genderVARCHAR(10),<br>PRIMARY KEY(sid)<br>);<br></code></pre></td></tr></table></figure></li><li><p>修改表时指定主键：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE stu ADD PRIMARY KEY(sid);<br></code></pre></td></tr></table></figure></li><li><p>删除主键：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">ALTER TABLE stu DROP PRIMARY KEY;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>主键自增长</p><ul><li><p>设置主键自增长</p><ol><li><p>在创建表时设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">CREATE TABLE stu(<br>sidINT PRIMARY KEY AUTO_INCREMENT,<br>snameVARCHAR(20),<br>ageINT,<br>genderVARCHAR(10),<br>);<br></code></pre></td></tr></table></figure></li><li><p>在修改表时设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">ALTER TABLE stu MODIFY sid INT AUTO_INCREMENT;<br></code></pre></td></tr></table></figure></li></ol></li></ul></li></ul><h2 id="二、非空约束：NOT-NULL"><a href="#二、非空约束：NOT-NULL" class="headerlink" title="二、非空约束：NOT NULL"></a>二、非空约束：NOT NULL</h2><h2 id="三、唯一约束：UNIQUE"><a href="#三、唯一约束：UNIQUE" class="headerlink" title="三、唯一约束：UNIQUE"></a>三、唯一约束：UNIQUE</h2><h2 id="四、外键约束：CONSTRAINT-FOREIGN-KEY-REFERENCES"><a href="#四、外键约束：CONSTRAINT-FOREIGN-KEY-REFERENCES" class="headerlink" title="四、外键约束：CONSTRAINT | FOREIGN KEY | REFERENCES"></a>四、外键约束：CONSTRAINT | FOREIGN KEY | REFERENCES</h2><ul><li><p>添加外键约束：</p><ul><li><p>创建时添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">CREATE TABLE 表名(<br>    主键列名 INT PRIMARY KEY AUTO_INCREMENT,<br>    列名1 VARCHAR(50),<br>    外键列名 INT,<br>    CONSTRAINT 外键约束名 FOREIGN KEY(外键列名) REFERENCES 关联表(关联表中的关联列)<br>);<br></code></pre></td></tr></table></figure></li><li><p>更新时添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">ALTER TABLE 表名 ADD CONSTRAINT 外键约束名 FOREIGN KEY(外键列名) REFERENCES 关联表(关联表中的关联列);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>外键特点：</p><ul><li>可为NULL</li><li>可重复</li><li>必须在关联表中关联列中存在。</li></ul></li></ul><h1 id="模型与关系"><a href="#模型与关系" class="headerlink" title="模型与关系"></a>模型与关系</h1><h2 id="概念模型"><a href="#概念模型" class="headerlink" title="概念模型"></a>概念模型</h2><ul><li><p>对象模型：</p><ul><li>在java中是domain</li><li>可以双向关联，而且引用的是对象，而不是一个主键</li></ul></li><li><p>关系模型：</p><ul><li><p>在数据库中是表</p><ul><li><p>只能多方引用一方，而且引用的只是主键，而不是一整行记录</p><p>当我们要完成一个软件系统时，需要把系统中的实体抽取出来，形成概念模型。例如部门、员工都是系统中的实体。</p></li></ul></li></ul></li><li><p><strong>实体之间的关系：</strong></p><ul><li><p>一对多（最常见）</p><blockquote><p>部门与员工，一个部门中有多个员工，而每个员工只属于一个部门。其中员工是多方，部门是一方。</p></blockquote></li><li><p>一对一</p><blockquote><p>夫妻，老公、老婆之间就是一对一的关系。</p></blockquote></li><li><p>多对多</p><blockquote><p>老师与学生，一个老师对应对个学生，一个学生也有多个老师</p></blockquote></li></ul></li></ul><p>概念模型中的实体最终会成为Java中的类、数据库中的表。类使用成员变量来完成关系，一般都是<strong>双向关联</strong>。</p><ul><li><p>一对多</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> Department department;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Department</span> &#123;<br><span class="hljs-keyword">private</span> List&lt;Employee&gt; employee;<br>&#125; <br></code></pre></td></tr></table></figure></li><li><p>一对一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Husband</span> &#123;<br>    <span class="hljs-keyword">private</span> Wife wife;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Wife</span> &#123;<br>    <span class="hljs-keyword">private</span> Husband husband;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>多对多</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Teacher&gt; teacher;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Student&gt; student;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><ul><li><p>一对一关系：</p><blockquote><p>从表的主键作为外键关联主表的主键</p></blockquote><p>husband不做处理，将wife中的主键作为外键关联到husband的主键。从而实现一对一的关系</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE husband(<br>hid INT PRIMARY AUTO_INCREMENT,<br>    hname VARCHAR(50)<br>);<br><br>CREATE TABLE wife(<br>wid INT PRIMARY KEY AUTO_INCREMENT,<br>    wname VARCHAR(50),<br>    CONSTRAINT fk_wife_husband FOREIGN KEY(wid) REFERENCES husband(hid);<br>);<br></code></pre></td></tr></table></figure></li><li><p>多对多关系</p><blockquote><p>使用中间表 (关联表)</p></blockquote><p>师生关系，创建一个学生表，一个老师表，在创建一个师生关系表，其中一个键为学生，一个键为老师，分别使用外键关联到学生表，老师表。相当与将师生关系抽离出来单独使用一张表来存储。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE student(<br>sid INT PRIMARY KEY,<br>    ...<br>);<br>CREATE TABLE teacher(<br>tid INT PRIMARY KEY,<br>    ...<br>);<br><br>CREATE TABLE stu_tea(<br>sid INT,<br>    tid INT,<br>    ADD CONSTRAINT fk_stu_tea_sid FOREIGN KEY(sid) REFERENCES student(sid),<br>    ADD CONSTRAINT fk_stu_tea_tid FOREIGN KEY(tid) REFERENCES teacher(tid)<br>);<br></code></pre></td></tr></table></figure></li></ul><h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><h2 id="一、合并结果集"><a href="#一、合并结果集" class="headerlink" title="一、合并结果集"></a>一、合并结果集</h2><blockquote><ul><li>要求被合并的表，列的类型和列数相同（即两张表结构完全相同）</li><li>合并结果集语法<ul><li>UNION，在合并的时候去除重复行</li><li>UNION，不去除重复行</li></ul></li></ul></blockquote><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">SELECT * FROM a<br>UNION ALL<br>SELECT * FROM b;<br></code></pre></td></tr></table></figure><h2 id="二、连接查询"><a href="#二、连接查询" class="headerlink" title="二、连接查询"></a>二、连接查询</h2><ul><li><p><strong>内连接</strong></p><ul><li><p>方言</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">SELECT * <br>FROM 表1 别名一，表2 别名2 <br>WHERE 别名1.xx=别名2.xx;<br></code></pre></td></tr></table></figure><blockquote><ul><li>若没有WHERE子句，那么查询出来的结果个数成为笛卡尔积，即表一中的每一项分别与表二中的每一项匹配生成表，即最终共的结果数目为：表一数据个数*表二数据个数</li><li>WHERE子句的作用就是去笛卡尔积，一般使用表一中对应的连接的内键和外键来去笛卡尔积</li></ul></blockquote></li><li><p>标准：<strong>INNER JOIN | ON</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">SELECT * <br>FROM 表1 别名一 INNER JOIN 表2 别名2 <br>ON 别名1.xx=别名2.xx;<br></code></pre></td></tr></table></figure></li><li><p>自然：<strong>NATRURAL JOIN</strong></p><blockquote><p>自然连接会在两张表中寻找名字相同的列自动进行匹配，相当于自动完成<code>ON 别名1.xx=别名2.xx</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * <br>FROM 表1 别名一 NATURAL JOIN 表2 别名2;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>外连接</strong></p><blockquote><p>外连接有一主一次，主表中的所有记录不论是否满足条件，都会打印出来，主表中没有对应的次表项，那么对应的次表条目使用NULL填充</p></blockquote><ul><li>左外连接：<strong>LEFT OUTER JOIN</strong></li><li>右外连接：<strong>RIGHT OUTER JOIN</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">SELECT e.ename, e.sal IFNULL(d.dname, &#x27;无部门&#x27;) AS dname<br>FROM emp e LEFT OUTER JOIN dept d<br>ON e.deptno=d.depton;<br></code></pre></td></tr></table></figure></li></ul><h2 id="三、子查询"><a href="#三、子查询" class="headerlink" title="三、子查询"></a>三、子查询</h2><ul><li><p>不同子查询结果的应用：</p><ul><li><p>多行多列</p><blockquote><p>FROM后，子查询的结果作为用于查询的表</p></blockquote></li><li><p>单行单列</p><blockquote><p>WHERE后，子查询的结果作为过滤条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">SELECT *<br>FROM emp<br>WHERE sal=(SELECT MAX(SAL) FROM emp);<br></code></pre></td></tr></table></figure><p>查询本公司工资最高的员工的详细信息，条件为工资最高，最高工资要使用MAX()查询</p></blockquote></li><li><p>多行单列：<strong>IN | ALL | ANY</strong></p><blockquote><p>WHERE后，与IN\ALL\ANY一起，作为搜索条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">    &gt;SELECT *<br>FROM emp<br>WHERE sal &gt; ALL (SELECT sal FROM emp WHERE deptno=30);<br></code></pre></td></tr></table></figure><p>搜索工资大于30部门所有员工工资的员工</p></blockquote></li><li><p>单行多列</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">SELECT *<br>FROM emp<br>WHERE (job, depno) IN (SELECT job, depno FROM emp WHERE ename=&#x27;殷天正&#x27;)；<br></code></pre></td></tr></table></figure><p>查询工资和部门与殷天正完全相同的员工</p></blockquote></li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL入门笔记</title>
    <link href="/2022/09/02/MySQL%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/09/02/MySQL%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL简介"><a href="#SQL简介" class="headerlink" title="SQL简介"></a>SQL简介</h1><ol><li><p>什么是 SQL</p><blockquote><p>结构化查询语言（Structured Query Language）</p></blockquote></li><li><p>SQL 的作用</p><blockquote><p>客户端使用SQL来操作服务器</p></blockquote></li><li><p>语法规范</p><blockquote><ul><li>SQL语句可以在单行或多行书写, 以<strong>分号结尾</strong></li><li>可以使用空格和缩进来增强语句的<strong>可读性</strong></li><li>MySQL不区分大小写, 但是<strong>建议使用大写</strong></li></ul></blockquote></li><li><p>SQL语句分类</p><blockquote><ul><li><p>DDL(Data Definition Language): 数据定义语言</p><blockquote><p>创建、删除、修改：库、表结构</p></blockquote></li><li><p>DML(Data Manipulation Language): 数据操作语言</p><blockquote><p>增、删、改：表记录</p></blockquote></li><li><p>DQL(Data Query Language):  数据查询语言</p><blockquote><p>用来查询记录（数据）</p></blockquote></li><li><p>DCL(Data Control Language): 数据控制语言</p><blockquote><p>用来定义访问权限和安全级别（用户创建，以及用户的权限管理）</p></blockquote></li></ul></blockquote></li></ol><h1 id="DDL（数据定义语言）"><a href="#DDL（数据定义语言）" class="headerlink" title="DDL（数据定义语言）"></a>DDL（数据定义语言）</h1><h2 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h2><ul><li>查看所有数据库：<code>SHOW DATABASES</code></li><li>切换（选择要操作的）数据库：<code>USE 数据库名</code></li><li>创建数据库：<code>CREATE DATABASE [IF NOT EXISTS] 数据库名</code> </li><li>删除数据库：<code>DROP DATABASE [IF EXISTS] 数据库名</code></li><li>修改数据库编码：<code>ALTER DATABASE 数据库名CHARACTER SET 编码名</code></li></ul><h2 id="数据类型（列数据类型）"><a href="#数据类型（列数据类型）" class="headerlink" title="数据类型（列数据类型）"></a>数据类型（列数据类型）</h2><ul><li><p>int：整型</p></li><li><p>double：浮点型</p><blockquote><p>double(5, 2)表示最多5位，其中必须有两位小数</p></blockquote></li><li><p>decimal：浮点型</p><blockquote><p>十进制浮点类型，不会出现浮点数精度丢失问题，在跟钱相关的方面使用该类</p></blockquote></li><li><p>char：固定长度字符串</p><blockquote><p>char(255)，数据长度不足，则会补足到指定长度</p></blockquote></li><li><p>varchar：可变长字符串类型</p><blockquote><ul><li><p>varchar(65535)，最大指定长度为65535，当数据长度不足指定长度的时候，不用补足到指定长度。</p></li><li><p>需要使用额外的一个字节来记录数据长度</p></li></ul></blockquote></li><li><p>text：字符串类型</p><blockquote><p>MySQL的方言，在标准SQL中为clob</p></blockquote><ul><li>tinytext：256B</li><li>text：64K</li><li>mediumtext：16M</li><li>longtext：4G</li></ul></li><li><p>blob：字节类型</p><ul><li>varblob</li><li>tinyblob</li><li>blob</li><li>mediumblob</li><li>longblob</li></ul></li><li><p>时间相关</p><ul><li>date：日期类型，格式：yyyy- MM-dd;</li><li>time：时间类型， 格式：hh:mm:ss；</li><li>timestamp：时间戳类型：</li></ul></li></ul><h2 id="操作表"><a href="#操作表" class="headerlink" title="操作表"></a>操作表</h2><p><strong>注意：所有对表的操作都要在选定数据库之后</strong></p><ol><li><p>创建表</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE [IF NOT EXISTS] 表名(<br>列名 列类型,<br>    ...<br>    列名 列类型,<br>);<br></code></pre></td></tr></table></figure></blockquote></li><li><p>查看表</p><blockquote><ul><li><p>查看当前数据库中左右表名称：<code>SHOW TABLES;</code></p></li><li><p>查看指定表的创建语句：<code>SHOW CREATE TABLE 表名;</code>(了解)</p></li><li><p>查看表结构： <code>DESC 表名;</code></p></li></ul></blockquote></li><li><p>删除表：<code>DROP TABLE 表名;</code></p></li><li><p>修改表：<strong>ALTER</strong></p><ul><li><p>添加列：<strong>ADD</strong></p><blockquote> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE 表名 ADD(<br>列名 列类型,<br>    ...<br>    列名 列类型,<br>);<br></code></pre></td></tr></table></figure></blockquote></li><li><p>删除列：<strong>DROP</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE 表名 DROP 列名;<br><br>  - 修改列类型：**MODIFY**<br><br>```mysql<br>ALTER TABLE 表名 MODIFY 列名 列类型;<br></code></pre></td></tr></table></figure></blockquote></li><li><p>修改列名：<strong>CHANGE</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE 表名 CHANGE  原列名 新列名 列类型；<br></code></pre></td></tr></table></figure></blockquote></li><li><p>修改表名称：<strong>RENAME</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE 原表名 RENAME TO 新表名<br></code></pre></td></tr></table></figure></blockquote></li></ul></li></ol><h1 id="DML（数据操作语言）"><a href="#DML（数据操作语言）" class="headerlink" title="DML（数据操作语言）"></a>DML（数据操作语言）</h1><blockquote><p>先了解一个查询语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SLEECT * FROM 表名<br></code></pre></td></tr></table></figure><ul><li>显示所有数据库：<code>SHOW DATABASES;</code></li><li>选择数据库：<code>USE 数据库名;</code></li><li>显示数据库中所有表：<code>SHOW TABLES;</code></li></ul></blockquote><h2 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h2><ol><li>给出插入列</li></ol><blockquote><ul><li>列名与列值对应，不一定要按照表中列顺序，若插入的是部分列，那么未填写的列为null值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO 表名(<br>列名1,列名2，列名3<br>)<br>VALUES(<br> 列对应值1，列对应值2，对应列值3<br>);<br></code></pre></td></tr></table></figure></blockquote><ol start="2"><li>不给出插入列</li></ol><blockquote><ul><li>默认插入所有列，必须根据表中列的排序给出所有列值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INT 表名 VALUES(<br>列值1，列值2，列值3<br>);<br></code></pre></td></tr></table></figure></blockquote><p><strong>注意：</strong>MySQL中的字符串<strong>必须使用单引号</strong></p><h2 id="修改记录"><a href="#修改记录" class="headerlink" title="修改记录"></a>修改记录</h2><p>基本语句：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">UPDATE</span> 表名 SET 列名<span class="hljs-number">1</span>=列值<span class="hljs-number">1</span>，列名<span class="hljs-number">2</span>=列值<span class="hljs-number">2</span><span class="hljs-meta"> [WHERE 条件]</span><br></code></pre></td></tr></table></figure><p>注意：若没有WHERE条件，那么这个表中的所有行都会被修改。WHERE 条件用于选择需要修改的行。</p><p>条件：</p><blockquote><p>运算符</p><ul><li>**&#x3D;**、!&#x3D;(&lt;&gt;等价)&lt;、&gt;、&lt;&#x3D;、&gt;&#x3D;</li><li>区间：BETWEEN…AND…</li><li>枚举：IN(…)</li><li>IS NULL</li><li>连接多个条件：NOT、OR、AND</li></ul></blockquote><h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><p>基本语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELETE FROM 表名 [WHERE 条件]<br></code></pre></td></tr></table></figure><p>注意：不加WHERE整个表中数据都会被删除（表还在）</p><h1 id="DCL（数据控制语言）"><a href="#DCL（数据控制语言）" class="headerlink" title="DCL（数据控制语言）"></a>DCL（数据控制语言）</h1><p>对于DCL的理解：</p><blockquote><ul><li>一个项目创建一个用户，一个项目对应的数据库只有一个</li><li>这个用户只拥有该数据库的权限，无法操作其他数据库</li></ul></blockquote><h2 id="1-创建用户"><a href="#1-创建用户" class="headerlink" title="1. 创建用户"></a>1. 创建用户</h2><p>用户只能在指定IP登录</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE USER 用户名@IP地址 IDENTIFIED BY &#x27;密码&#x27;;<br></code></pre></td></tr></table></figure></blockquote><p>用户可以在任意IP登录</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE USER 用户名@IP&#x27;*&#x27; IDENTIFIED BY &#x27;密码&#x27;;<br></code></pre></td></tr></table></figure></blockquote><h2 id="2-给用户授权"><a href="#2-给用户授权" class="headerlink" title="2. 给用户授权"></a>2. 给用户授权</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">GRANT 权限1,...,权限n ON 数据库.* TO 用户名@IP地址;<br></code></pre></td></tr></table></figure><ul><li><p>将<strong>指定数据库</strong>的<strong>指定权限</strong>赋予<strong>指定用户</strong></p></li><li><p>要素：权限、数据库、用户</p><blockquote><p>权限：</p><ul><li><p>CREATE、ALTER、DROP、INSERT、UPDATE、DELETE、SELECT</p></li><li><p>ALL表示所有权限</p></li></ul></blockquote></li></ul><h2 id="3-撤销授权"><a href="#3-撤销授权" class="headerlink" title="3. 撤销授权"></a>3. 撤销授权</h2><p>操作基本同授权一样，使用REVOKE替换GRANT即可</p><h2 id="4-查看权限"><a href="#4-查看权限" class="headerlink" title="4. 查看权限"></a>4. 查看权限</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW GRANTS FOR 用户名@IP地址;<br></code></pre></td></tr></table></figure><h2 id="5-删除用户"><a href="#5-删除用户" class="headerlink" title="5. 删除用户"></a>5. 删除用户</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP USER 用户名@IP地址<br></code></pre></td></tr></table></figure><h1 id="DQL（数据查询语言）"><a href="#DQL（数据查询语言）" class="headerlink" title="DQL（数据查询语言）"></a>DQL（数据查询语言）</h1><h2 id="一、基础查询"><a href="#一、基础查询" class="headerlink" title="一、基础查询"></a>一、基础查询</h2><ul><li><strong>查询所有列（整张表）</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">SELECT * FROM 表名;<br></code></pre></td></tr></table></figure><h3 id="1-列控制"><a href="#1-列控制" class="headerlink" title="1. 列控制"></a>1. 列控制</h3><ol><li>查询指定列</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">SELECT 列名1,列名2 FROM 表名;<br></code></pre></td></tr></table></figure><ol start="2"><li>完全重复的记录只有一次</li></ol><blockquote><p>当查询结果中多行记录一摸一样时，只显示一行</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">SELECT DISTINCT 列名 FROM 表名;<br></code></pre></td></tr></table></figure><ol start="3"><li>列运算</li></ol><ul><li><p>数量类型的列可以做加减乘除运算</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT 列名*1.5 FROM 表名;<br>SELECT 列名1+列名2 FROM 表名;<br></code></pre></td></tr></table></figure></li><li><p>字符串类型的列可以做连续运算</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">SELECT CONCAT(&#x27;S&#x27;, 列名) FROM 表名;<br></code></pre></td></tr></table></figure></li></ul><blockquote><ul><li>转换NULL值</li></ul>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT IFNULL (列名1,0)+1000 FROM 表名;<br></code></pre></td></tr></table></figure><blockquote><p>IFNULL(列名1，0) 表示，如果列1中的值为NULL，则当为0计算</p></blockquote><ul><li>给列起别名</li></ul><blockquote><p>在使用列运算后自动生成的列名称不直观，可以给列名起个别名(<strong>AS可省略</strong>)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT IFNULL (列名1,0)+1000 FROM 表名 AS 奖学金;<br></code></pre></td></tr></table></figure></blockquote><h3 id="2-行控制"><a href="#2-行控制" class="headerlink" title="2. 行控制"></a>2. 行控制</h3><ol><li><p>条件查询: <strong>WHERE</strong></p><blockquote><p>同前面的UPDATE和DELETE语句一样，使用WHERE子句来控制记录</p></blockquote></li><li><p>模糊查询: <strong>LIKE</strong></p><blockquote><p>用来对<strong>字符串列</strong>进行模糊查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">WHERE 列名 LIKE &#x27;李_&#x27;;<br></code></pre></td></tr></table></figure><ul><li>_下划线，用来匹配一个字符</li><li>%百分号，用来匹配0-n个字符</li></ul></blockquote></li></ol><h3 id="二、排序：ORDER-BY"><a href="#二、排序：ORDER-BY" class="headerlink" title="二、排序：ORDER BY"></a>二、排序：ORDER BY</h3><ol><li><p>默认升序: <strong>ASC</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">SELECT * FROM 表名 ORDER BY 列名；<br></code></pre></td></tr></table></figure></li><li><p>降序排序: <strong>DESC</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">SELECT * FROM 表名 ORDER BY 列名 DESC;<br></code></pre></td></tr></table></figure></li><li><p>多条件排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">SELECT * FROM 表名 ORDER BY 列名1 DESC, 列名2 ASC;<br></code></pre></td></tr></table></figure></li></ol><h2 id="三、聚合函数"><a href="#三、聚合函数" class="headerlink" title="三、聚合函数"></a>三、聚合函数</h2><ol><li><p>查询有效行数：<strong>COUNT()</strong></p><blockquote><p>括号中可以是列名、*、数字，其中*和数字跟*等效</p></blockquote></li><li><p>计算</p><blockquote><p> 计算中的括号中只能填写数字列</p></blockquote><ul><li>总和：<strong>SUM()</strong></li><li>最大值：<strong>MAX()</strong></li><li>平均值：<strong>AVG()</strong></li></ul></li><li><p>综合计算</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">SELECT COUNT(*),SUM(列名1)，MAX(列名2) FROM 表名;<br></code></pre></td></tr></table></figure></li></ol><h2 id="四、分组查询：GROUP-BY-HAVING"><a href="#四、分组查询：GROUP-BY-HAVING" class="headerlink" title="四、分组查询：GROUP BY|HAVING"></a>四、分组查询：GROUP BY|HAVING</h2><blockquote><ul><li>分组</li></ul><blockquote><p>将一列中值相同的行分为一组</p></blockquote><ul><li>查询</li></ul><blockquote><p>分组查询不能使用个人信息查询，都是使用聚合信息进行查询</p></blockquote></blockquote><p>分组查询过滤</p><ul><li><p>分组前过滤条件（对整张表进行过滤）</p><blockquote><p>WHERE</p><p>在ORDER BY之前</p></blockquote></li><li><p>分组后过滤条件（对分组查询的结果过滤）</p><blockquote><p>HAVING</p><p>在ORDER BY之后</p></blockquote></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT 列名1(展示列), 聚合函数 FROM 表名 WHERE 分组前条件 GROUP BY 列名2(分组列) HAVING 分组后条件 ORDER BY 列名3(排序列)<br></code></pre></td></tr></table></figure><blockquote><p>同一SQL语句中，关键字使用顺序(执行顺序也是如此)：</p><ol><li>SELECT</li><li>FROM</li><li>WHERE</li><li>GROUP BY</li><li>HAVING</li><li>ORDER BY</li></ol></blockquote><h2 id="五、LIMIT方言"><a href="#五、LIMIT方言" class="headerlink" title="五、LIMIT方言"></a>五、LIMIT方言</h2><p>LIMIT作用：</p><blockquote><ul><li>用来限定查询结果的起始行，以及总行数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM 表名 LIMIT a,b;<br></code></pre></td></tr></table></figure><p>从第a行开始查b行数据</p></blockquote><p>LIMIT应用：</p><blockquote><ul><li>用于分页查询</li></ul><p>若每页十行数据，那么如果要查第三页，语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">SELECT * FROM 表名 LIMIT 20,10;<br></code></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL45讲笔记</title>
    <link href="/2022/09/02/MySQL45%E8%AE%B2/"/>
    <url>/2022/09/02/MySQL45%E8%AE%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="学习MySQL原理的意义"><a href="#学习MySQL原理的意义" class="headerlink" title="学习MySQL原理的意义"></a>学习MySQL原理的意义</h1><p>即使是MySQL的使用者，而非开发者，也需要理解MySQL的原理</p><ul><li>提升数据库的性能</li><li>更快速的定位并解决问题</li></ul><h1 id="一条MySQL语句是怎么执行的"><a href="#一条MySQL语句是怎么执行的" class="headerlink" title="一条MySQL语句是怎么执行的"></a>一条MySQL语句是怎么执行的</h1><h2 id="MySQL的基本架构"><a href="#MySQL的基本架构" class="headerlink" title="MySQL的基本架构"></a>MySQL的基本架构</h2><p><img src="/2022/09/02/MySQL45%E8%AE%B2/0d2070e8f84c4801adbfa03bda1f98d9.png" alt="img"></p><h3 id="Server层"><a href="#Server层" class="headerlink" title="Server层"></a>Server层</h3><h4 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h4><blockquote><p>管理连接，权限验证</p></blockquote><ul><li><p>数据库<strong>连接命令</strong>:  <code>mysql -h$ip -P$port -u$user -p</code></p></li><li><p>用户的<strong>权限</strong>在建立连接的时候获取, 对于已经成功建立连接的用户, 管理员再修改其权限, 不会影响当前连接的权限</p></li><li><p>连接没有操作就会处于**休眠(Sleep)**状态, 超过8个小时休眠, 会自动断开连接, 右参数wait_timeout控制</p></li><li><p>长连接与短连接</p><ul><li><p>长连接不需要频繁的建立连接, 而建立连接的过程比较复杂, 所以说<strong>尽量使用长连接</strong></p></li><li><p>MySQL在执行过程中临时使用的内存是管理在连接对象中的, 这些资源在连接断开的时候才会释放, 若全部使用长连接, 可能会导致内存占用过大, 被系统强行杀掉(OOM), 从现象上看就是MySQL异常重启</p><blockquote><p>解决办法:</p><ol><li>定期断开长连接。使用一段时间或者执行一个内存占用较大的查询后,断开连接，下一次查询的时候再重连。</li><li>重新初始化连接资源。在执行一个比较大的操作后，通过执行mysql_reset_connection来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将来连接恢复至刚刚创建完时的状态。</li></ol></blockquote></li></ul></li></ul><h4 id="缓存器"><a href="#缓存器" class="headerlink" title="缓存器"></a>缓存器</h4><blockquote><p>已经被淘汰</p></blockquote><h4 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h4><blockquote><p>词法分析，语法分析</p></blockquote><h4 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h4><blockquote><p>执行计划生成,索引选择</p></blockquote><p>优化器实在表中有<strong>多个索引</strong>的时候，决定使用哪个索引，或者在一个语句有<strong>多个表关联</strong>的时候，决定各个表的连接顺序。</p><p>不同的执行顺序，执行的效率有所不同，优化器的作用就是选择执行顺序。</p><h4 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h4><blockquote><p>操作引擎, 返回结果</p></blockquote><ol><li><p>检查权限</p></li><li><p>打开表，根据表的引擎定义，区使用该引擎提供的接口</p></li></ol><p>执行器执行流程:</p><blockquote><ul><li>命令: <code>select * from T where ID=10;</code></li></ul><ol><li>调用InnoDB引擎接口取这个表的第一行，判断ID值是不是10，如果不是则跳过，如果是则将这行存在结果集中</li><li>调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行</li><li>执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端</li></ol></blockquote><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><ul><li>InnoDB (默认)</li><li>MyISAM</li><li>Memory</li></ul><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ul><li><p>表T没有字段K，但是执行<code>select * from T where k=1</code>，肯定会报错”不存在这个列”，这个错误实在哪个阶段报出来的？</p><blockquote><p>分析器阶段。在分析阶段，会判断语句是否正确，表是否存在，列是否存在。</p></blockquote></li></ul><h2 id="MySQL的日志系统"><a href="#MySQL的日志系统" class="headerlink" title="MySQL的日志系统"></a>MySQL的日志系统</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MarkDown入门</title>
    <link href="/2022/09/01/MarkDownBase/"/>
    <url>/2022/09/01/MarkDownBase/</url>
    
    <content type="html"><![CDATA[<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><h2 id="一、基本语法"><a href="#一、基本语法" class="headerlink" title="一、基本语法"></a>一、基本语法</h2><h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. <strong>标题</strong></h3><blockquote><p># H1 </p><p>## H2</p><p>### H3</p><h1 id="H1"><a href="#H1" class="headerlink" title="H1"></a>H1</h1><h2 id="H2"><a href="#H2" class="headerlink" title="H2"></a>H2</h2><h3 id="H3"><a href="#H3" class="headerlink" title="H3"></a>H3</h3></blockquote><h3 id="2-粗体"><a href="#2-粗体" class="headerlink" title="2. 粗体"></a>2. <strong>粗体</strong></h3><blockquote><p>*<em>bold text</em>*</p><p><strong>bold text</strong></p></blockquote><h3 id="3-斜体"><a href="#3-斜体" class="headerlink" title="3. 斜体"></a>3. <strong>斜体</strong></h3><blockquote><p>*italicized text*</p><p><em>italicized text</em></p></blockquote><h3 id="4-引用块"><a href="#4-引用块" class="headerlink" title="4. 引用块"></a>4. <strong>引用块</strong></h3><blockquote><p>&gt; blockquote</p><blockquote><p>blockquote</p></blockquote></blockquote><h3 id="5-有序列表"><a href="#5-有序列表" class="headerlink" title="5. 有序列表"></a>5. <strong>有序列表</strong></h3><blockquote><ol><li>First item</li><li>Second item</li><li>Third item</li></ol></blockquote><h3 id="6-无序列表"><a href="#6-无序列表" class="headerlink" title="6. 无序列表"></a>6. <strong>无序列表</strong></h3><blockquote><p>- First item</p><p>- Second item</p><p>- Third item</p><ul><li>First item</li><li>Second item</li><li>Third item</li></ul></blockquote><h3 id="7-代码"><a href="#7-代码" class="headerlink" title="7. 代码"></a>7. <strong>代码</strong></h3><blockquote><p>`code&#96;</p><p><code>code</code></p></blockquote><h3 id="8-分隔线"><a href="#8-分隔线" class="headerlink" title="8. 分隔线"></a>8. <strong>分隔线</strong></h3><blockquote><p>-–</p><hr></blockquote><h3 id="9-链接"><a href="#9-链接" class="headerlink" title="9. 链接"></a>9. <strong>链接</strong></h3><blockquote><p>[title](<a href="http://www.example.com/">http://www.example.com</a>)</p><p><a href="http://www.example.com/">title</a></p></blockquote><h3 id="10-图片"><a href="#10-图片" class="headerlink" title="10. 图片"></a>10. <strong>图片</strong></h3><blockquote><p>![alt text](<a href="https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png&quot;picture">https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png&quot;picture</a> title”)</p><p><img src="/2022/09/01/MarkDownBase/googlelogo_color_272x92dp.png" alt="alt text" title="picture title"></p></blockquote><h2 id="二、扩展语法"><a href="#二、扩展语法" class="headerlink" title="二、扩展语法"></a>二、扩展语法</h2><h3 id="1-表格"><a href="#1-表格" class="headerlink" title="1. 表格"></a>1. <strong>表格</strong></h3><blockquote><p>| Syntax    | Description |<br>| ——— | ———– |<br>| Header    | Title       |<br>| Paragraph | Text        |</p><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>Header</td><td>Title</td></tr><tr><td>Paragraph</td><td>Text</td></tr></tbody></table></blockquote><h3 id="2-代码块"><a href="#2-代码块" class="headerlink" title="2. 代码块"></a>2. <strong>代码块</strong></h3><blockquote><p>`&#96;&#96;json<br>{<br>“firstname”: “John”,<br>“lastname”: “Smith”,<br>“age”: 25<br>}<br>`&#96;&#96;</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;firstname&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;John&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;lastname&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Smith&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">25</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="3-脚注"><a href="#3-脚注" class="headerlink" title="3. 脚注"></a>3. <strong>脚注</strong></h3><blockquote><p>Here’ s a sentence with a footnote.[^1]</p><p>[^1]:This is the footnote.</p></blockquote><p>Here’ s a sentence with a footnote.<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="This is the footnote.">[1]</span></a></sup></p><h3 id="4-删除线"><a href="#4-删除线" class="headerlink" title="4. 删除线"></a>4. <strong>删除线</strong></h3><blockquote><p>~~The world is flat.~~</p><p><del>The world is flat.</del></p></blockquote><h3 id="5-任务列表"><a href="#5-任务列表" class="headerlink" title="5. 任务列表"></a>5. <strong>任务列表</strong></h3><blockquote><p>- [x] Write the press release</p><p>- [ ] Update the website</p><p>- [ ] Contact the media</p><ul><li><input checked disabled type="checkbox"> Write the press release</li><li><input disabled type="checkbox"> Update the website</li><li><input disabled type="checkbox"> Contact the media</li></ul></blockquote><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>This is the footnote.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="/2022/09/01/HexoBlogBuild/"/>
    <url>/2022/09/01/HexoBlogBuild/</url>
    
    <content type="html"><![CDATA[<ol><li><h1 id="Hexo博客-搭建-美化-使用"><a href="#Hexo博客-搭建-美化-使用" class="headerlink" title="Hexo博客 搭建+美化+使用"></a>Hexo博客 搭建+美化+使用</h1><h2 id="一、搭建"><a href="#一、搭建" class="headerlink" title="一、搭建"></a>一、搭建</h2><h3 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1. 前期准备"></a>1. 前期准备</h3><h4 id="1-1-注意事项"><a href="#1-1-注意事项" class="headerlink" title="1.1 注意事项"></a>1.1 注意事项</h4><ul><li>命令可以使用Windows的<strong>cmd</strong>和<strong>git bash</strong>来完成，cmd可能会有一些问题，建议全部使用git bash执行</li><li>hexo版本差异大，网上一些配置信息基于2.x，注意区别</li><li>hexo中有两种_config.yml文件，一个hexo根目录下的,一个是各个theme目录下的</li></ul><h4 id="1-2-安装所需软件"><a href="#1-2-安装所需软件" class="headerlink" title="1.2 安装所需软件"></a>1.2 安装所需软件</h4><ul><li>node.js<ul><li>官网：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></li><li>安装后验证：<code>node -v</code></li></ul></li><li>git<ul><li>官网：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></li><li>安装后验证：<code>git -v</code></li></ul></li><li>cnpm<ul><li>安装命令： <code>npm install -g cnpm –registry==https://registry.npm.taobao.org</code></li><li>安装后验证：<code>cnpm -v</code></li></ul></li><li>hexo<ul><li>安装命令：<code>cnpm install -g hexo-cli</code></li><li>安装后验证：<code>hexo -v</code></li></ul></li></ul><h3 id="2-配置GitHub"><a href="#2-配置GitHub" class="headerlink" title="2. 配置GitHub"></a>2. 配置GitHub</h3><h4 id="2-1-在GitHub上创建仓库"><a href="#2-1-在GitHub上创建仓库" class="headerlink" title="2.1 在GitHub上创建仓库"></a>2.1 在GitHub上创建仓库</h4><ol><li>创建一个以<strong>你的用户名.github.io</strong>的仓库</li><li>注意：我的用户名为xiang-4422，所以仓库为xiang-4422.githun.io，网站的访问地址就是<a href="http://xiang-4422.github.io/">http://xiang-4422.github.io</a>。由此可见，每个github账户只能创建一个这样可以直接使用域名访问的仓库。</li></ol><h4 id="2-2-绑定域名（可选）"><a href="#2-2-绑定域名（可选）" class="headerlink" title="2.2 绑定域名（可选）"></a>2.2 绑定域名（可选）</h4><ol><li>注册域名<ul><li>godaddy</li><li>阿里云</li></ul></li><li>绑定域名<ul><li>带www</li><li>不带www</li><li>无论域名是否带www，在访问的时候使用两种方式都能跳转</li></ul></li><li>域名配置<ul><li>方式一、CNAME<ul><li>CNAME填写域名，即<strong>用户名.github.io</strong></li></ul></li><li>方式二、A记录<ul><li>A记录填写IP</li><li>不带www的方式只能采用A记录，所以需要先ping一下网站的IP，然后到域名DNS设置页中，将A记录指向ping出来的IP</li></ul></li></ul></li></ol><h3 id="3-配置SSH免密登录"><a href="#3-配置SSH免密登录" class="headerlink" title="3. 配置SSH免密登录"></a>3. 配置SSH免密登录</h3><h4 id="3-1-获取本地的SSH公钥"><a href="#3-1-获取本地的SSH公钥" class="headerlink" title="3.1 获取本地的SSH公钥"></a>3.1 获取本地的SSH公钥</h4><ol><li>打开电脑文件夹，找到 C:\Users\用户名\.ssh 文件夹并删除</li><li>在 C:\Users\用户名 目录下右键打开Git Bash Here，输入命令<code>ssh-keygen -t rsa -C github邮件地址</code>生成.ssh密钥，输入后连敲三次回车</li><li>生成.ssh文件夹后，打开该文件夹，打开id_rsa.pub文件，复制其中内容</li></ol><h4 id="3-2-在GitHub中添加公钥"><a href="#3-2-在GitHub中添加公钥" class="headerlink" title="3.2 在GitHub中添加公钥"></a>3.2 在GitHub中添加公钥</h4><ol start="4"><li>GitHub主页 -&gt; SSH and GPG keys -&gt; New SSH key，将复制的内容粘贴进去，设置一个title，并保存</li></ol><h4 id="3-3-检查是否配置成功"><a href="#3-3-检查是否配置成功" class="headerlink" title="3.3 检查是否配置成功"></a>3.3 检查是否配置成功</h4><ul><li><p>命令：<code>$ ssh -T git@github.com</code></p></li><li><p>成功后的提示信息：Are you sure you want to continue connecting (yes&#x2F;no)?，输入yes，然后会看到：</p><p>Hi liuxianan! You’ve successfully authenticated, but GitHub does not provide shell access.即配置成功</p></li></ul><h4 id="3-4-配置Git信息"><a href="#3-4-配置Git信息" class="headerlink" title="3.4 配置Git信息"></a>3.4 配置Git信息</h4><ul><li>命令：<code>$ git config –global user.name “GitHub用户名”</code></li><li>命令：<code>$ git config –global user.email “GitHub注册邮箱&quot;</code></li></ul><h3 id="4-使用hexo搭建博客"><a href="#4-使用hexo搭建博客" class="headerlink" title="4. 使用hexo搭建博客"></a>4. 使用hexo搭建博客</h3><h4 id="4-1-初始化"><a href="#4-1-初始化" class="headerlink" title="4.1 初始化"></a>4.1 初始化</h4><ol><li>在电脑中创建一个文件夹用于存放hexo的代码，作为hexo的根目录</li><li>在该文件夹中右键打开Git Bash Here，输入一下命令<ul><li><code>hexo init</code>: 初始化</li><li><code>hexo g</code>: 在public文件夹中生成相关html文件</li><li><code>hexo s</code>: 启动服务</li></ul></li><li>hexo g开启了本地预览服务，访问 <a href="http://localhost:4000/">http://localhost:4000</a> 查看。<ul><li>端口冲突问题解决：<a href="https://www.runoob.com/w3cnote/windows-finds-port-usage.html">https://www.runoob.com/w3cnote/windows-finds-port-usage.html</a></li></ul></li></ol><h4 id="4-2部署到GitHub个人主页"><a href="#4-2部署到GitHub个人主页" class="headerlink" title="4.2部署到GitHub个人主页"></a>4.2部署到GitHub个人主页</h4><ol><li>在hexo根目录下安装hexo-deployer-git插件<ul><li>安装命令：<code>npm install hexo-deployer-git -save</code></li></ul></li><li>编辑hexo根目录下的_config.yml文件，在文件末尾添加如下内容</li></ol><p><img src="/2022/09/01/HexoBlogBuild/8.png" alt="img"></p><ul><li>注意：其中repo中的内容为GitHub个人主页链接地址，如图：</li></ul><p><img src="/2022/09/01/HexoBlogBuild/9.png" alt="img"></p><ol start="3"><li>在根目录下使用命令：<code>hexo d</code>将本地blog推动到GitHub仓库<ul><li>可能需要username &amp; pwd</li><li>推送成功后，即可在浏览器中通过域名访问 <a href="https://xiang-4422.github.io/">https://xiang-4422.github.io/</a></li></ul></li></ol><h2 id="二、美化"><a href="#二、美化" class="headerlink" title="二、美化"></a>二、美化</h2><h3 id="1-更换主题"><a href="#1-更换主题" class="headerlink" title="1. 更换主题"></a>1. 更换主题</h3><ol><li><p>主题下载：</p><ul><li><p><a href="https://hexo.io/themes/">hexo官网</a>上有很多主题，我使用的是 fluid：<a href="https://github.com/fluid-dev/hexo-theme-fluid">GitHub仓库地址</a> | <a href="https://github.com/fluid-dev/hexo-theme-fluid">用户手册</a></p></li><li><p>到hexo根目录下使用Git Bash Here，输入命令<code>$ git clone 主题http链接 themes/主题名称</code>下载主题</p><p><img src="/2022/09/01/HexoBlogBuild/10.png" alt="img"></p></li><li><p>根目录中theme文件下就是博客的主题，可以下载多个，具体选择哪一个可以在hexo配置文件中配置</p></li></ul></li></ol><h3 id="2-使用主题"><a href="#2-使用主题" class="headerlink" title="2. 使用主题"></a>2. 使用主题</h3><ol><li>修改hexo配置文件<ul><li>打开hexo根目录下的_config.yml文件</li><li>找到theme: landscape项目，改为theme: 对应主题名</li><li>执行<code>hexo g</code>重新生成</li></ul></li><li>若出现问题依次执行下面命令<ul><li><code>hexo clean</code>清理public内容</li><li><code>hexo g</code>重新生成</li><li><code>hexo s</code>重新部署</li></ul></li></ol><h3 id="3-配置主题"><a href="#3-配置主题" class="headerlink" title="3. 配置主题"></a>3. 配置主题</h3><ul><li>根据使用主题对对应的配置文档进行主题配置</li><li>我使用过的是fluid：<a href="https://github.com/fluid-dev/hexo-theme-fluid">GitHub仓库地址</a> | <a href="https://github.com/fluid-dev/hexo-theme-fluid">用户手册</a></li></ul><h2 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h2><h3 id="1-写博客的步骤"><a href="#1-写博客的步骤" class="headerlink" title="1. 写博客的步骤"></a>1. 写博客的步骤</h3><h4 id="1-1-创建-md文件"><a href="#1-1-创建-md文件" class="headerlink" title="1.1 创建.md文件"></a>1.1 创建.md文件</h4><ul><li><p>方法一、使用hexo命令创建</p><ul><li><p>在hexo根目录，在Git Bash Here中执行命令：<code>hexo new &#39;文章名称&#39;</code></p></li><li><p>hexo会自动在对应位置生成.md文件，且自动在 新建的.md文件中生成如下内容</p><p><img src="/2022/09/01/HexoBlogBuild/16.png" alt="img"></p></li></ul></li><li><p>方法二、直接在hexo根目录\source\_posts文件夹下直接创建.md文件</p></li></ul><h4 id="1-2-编写并保存"><a href="#1-2-编写并保存" class="headerlink" title="1.2 编写并保存"></a>1.2 编写并保存</h4><ul><li>使用typora打开该文件，编写博客，写完后Ctrl+S保存关闭即可</li></ul><h4 id="1-3-推送博客"><a href="#1-3-推送博客" class="headerlink" title="1.3  推送博客"></a>1.3  推送博客</h4><ul><li>在hexo根目录下，在Git Bash Here中依次执行以下命令<ul><li><code>hexo clean</code>清理</li><li><code>hexo g</code>生成</li><li><code>hexo d</code>部署</li></ul></li></ul><h3 id="2-注意使用的文章-Front-matter-语法"><a href="#2-注意使用的文章-Front-matter-语法" class="headerlink" title="2. 注意使用的文章 Front-matter 语法"></a>2. 注意使用的文章 Front-matter 语法</h3><ul><li>不同主题有所不同，在主题的使用文档中查找。<a href="https://hexo.fluid-dev.com/docs/guide/#%E6%96%87%E7%AB%A0%E9%A1%B5">hexo中的说明</a></li><li><a href="https://hexo.fluid-dev.com/docs/guide/#%E6%96%87%E7%AB%A0%E9%A1%B5">fluid主题对应文档</a></li></ul><h3 id="3-向hexo博客中插入图片"><a href="#3-向hexo博客中插入图片" class="headerlink" title="3. 向hexo博客中插入图片"></a>3. 向hexo博客中插入图片</h3><h4 id="3-1-常规路径设置，及其问题"><a href="#3-1-常规路径设置，及其问题" class="headerlink" title="3.1 常规路径设置，及其问题"></a>3.1 常规路径设置，及其问题</h4><ul><li><p>md中插入图片的语法为：![]()</p><ul><li><p>[]为图片描述 | ()为图片路径:  路径分为三种</p><ul><li><p>相对路径</p><blockquote><p>在hexo配置文件中启用 post_asset_folder: true</p><p>使用hexo new命令创建文章的时候会生成同名的文件夹用于存放文件资源</p><p>引入图片：![](image.jpg)</p><p>问题：</p><ol><li><p>在Typora中无法显示</p><ul><li><p>在Typora引入相对路径图片：![](文章名&#x2F;image.jpg)</p></li><li><p>在Hexo中引入相对路径图片：![](image.jpg)</p></li></ul></li><li><p>在首页显示</p><ul><li>解决办法：使用标签插件语法 </li></ul></li></ol></blockquote></li><li><p>绝对路径</p><blockquote><p>将图片文件放在：hexo根目录&#x2F;source&#x2F;images&#x2F;image.jpg</p><p>引入图片：![图片描述](&#x2F;images&#x2F;image.jpg)</p><p>问题：</p><ul><li>所有文章的图片都在 source&#x2F;images 目录下，图片资源杂乱</li></ul></blockquote></li><li><p>网络路径</p><blockquote><p>问题：图片链接可能失效</p></blockquote></li></ul></li></ul></li></ul><h4 id="3-2-图片插入的解决办法"><a href="#3-2-图片插入的解决办法" class="headerlink" title="3.2 图片插入的解决办法"></a>3.2 图片插入的解决办法</h4><ol><li><p>asset-image插件</p><ul><li><p>安装: <code>npm install https://github.com/CodeFalling/hexo-asset-image</code></p></li><li><p>修改Hexo配置文件</p><blockquote><p>post_asset_folder: true</p></blockquote></li><li><p>设置好后在Hexo中就可以使用 ![](文章名&#x2F;image.jpg) 插入图片</p></li></ul></li><li><p>asset-image插件+Typora结合</p><ul><li><p>在Typora中， 文件-&gt;偏好设置-&gt;图像中设置<img src="/2022/09/01/HexoBlogBuild/21.png" alt="img"></p></li><li><p>复制网络图片</p><blockquote><p>在网页中复制图片后，粘贴到Typora中，会直接复制该图片到文章资源文件夹中，同时自动更改路径</p><p>如：图片 https:&#x2F;&#x2F;…&#x2F;image.jpg 粘贴到Typora中叫文章名的文章中后，图片的路径自动变为(文章名&#x2F;image.jpg)，同时图片资源自动存入对应文章资源文件夹中</p></blockquote></li></ul></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://reclusew.github.io/2021/08/12/blog-setup/">2021年最全搭建+美化+使用博客教程</a></li><li><a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a></li><li><a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid 用户手册 (fluid-dev.com)</a></li><li><a href="http://codecook.site/2020/12/05/hexo%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E8%AE%BE%E7%BD%AE/">hexo图片路径设置</a></li></ol></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
